apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report' // gradle-1.9 feature
apply plugin: 'jacoco'         // gradle-1.9 incubating
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'info-broker'
apply plugin: 'info-jar'
apply plugin: 'info-basic'
apply plugin: 'info-java'


/********************************/
/**** Project configuration ****/

group = 'org.imagopole.ppms'
version = '0.4.2-SNAPSHOT'
description = """HTTP client for the PPMS Utility Management API (PUMAPI)"""


/********************************/
/**** Custom properties     ****/

ext.versions = [
    pumapi       : '2014.0',
    httpClient   : '4.3.1',        //--OMERO: 4.3.1
    csveed       : '0.3.2',        //--OMERO: n/a
    slf4j        : '1.7.6',        //--OMERO: 1.7.6
    logback      : '1.1.1',        //--OMERO: 1.1.1
    testng       : '6.8',          //--OMERO: n/p (6.8)
    unitils      : '3.3',          //--OMERO: n/a
    spring       : '3.0.1.RELEASE' //--OMERO: n/p (3.0.1.RELEASE-A)
]


/**********************************/
/**** Buildfile configuration ****/

sourceCompatibility = 1.6
targetCompatibility = 1.6

jar {
    manifest {
        attributes 'X-Pumapi-Version': versions.pumapi
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}


/**
 * Reminder: all dependencies must remain in line with OMERO's runtime classpath
 **/
dependencies {
    // Apache HttpComponents fluent HttpClient
    compile 'org.apache.httpcomponents:fluent-hc:' + versions.httpClient
    compile 'org.csveed:csveed:' + versions.csveed
    compile 'org.slf4j:slf4j-api:' + versions.slf4j

    // logback slf4j binding
    runtime 'ch.qos.logback:logback-classic:' + versions.logback
    // slf4j bound to logback-classic + redirection of ACL to slf4j (ie. slf4j replaces commons-logging - see http://www.slf4j.org/legacy.html)
    runtime 'org.slf4j:jcl-over-slf4j:' + versions.slf4j

    testCompile 'org.testng:testng:' + versions.testng
    testCompile 'org.unitils:unitils-core:' + versions.unitils
    testCompile(group: 'org.unitils', name: 'unitils-testng', version: versions.unitils) {
        transitive = false
    }
    testCompile(group: 'org.unitils', name: 'unitils-spring', version: versions.unitils) {
        //exclude group: 'org.unitils', module: 'unitils-database'
        exclude group: 'org.springframework'
        exclude group: 'org.slf4j'
        exclude group: 'ch.qos.logback'
    }
    testRuntime 'org.springframework:spring-test:' + versions.spring
    testRuntime 'org.springframework:spring-context:' + versions.spring
}

test {
    useTestNG()

    //testLogging.showStandardStreams = true

    // for integration tests only
    // either one or the other:
    // - PUMAPI_CONFIG has priority
    // - if not set, then fallback on a default 'pumapi.config.location' in $HOME/pumapi-local.properties
    systemProperty 'PUMAPI_CONFIG',          System.getenv("PUMAPI_CONFIG")
    systemProperty 'pumapi.config.location', System.getProperty("user.home") + '/pumapi-local.properties'
}

task unitTest(type: Test) {
    useTestNG() {
        excludeGroups 'integration'
    }

    //testLogging.showStandardStreams = true

    systemProperty 'PUMAPI_CONFIG',          System.getenv("PUMAPI_CONFIG")
    systemProperty 'pumapi.config.location', System.getProperty("user.home") + '/pumapi-local.properties'
}


/********************************/
/**** Plugins configuration ****/

findbugs {
    sourceSets     = [sourceSets.main]
    effort         = 'max'
    reportLevel    = 'high'
    ignoreFailures = true
}

findbugsMain {
    reports {
      xml.enabled  = false
      html.enabled = true
    }
}

pmd {
    sourceSets     = [sourceSets.main]
    ignoreFailures = true
    ruleSetFiles   = files("config/pmd/pmd.xml")
}

checkstyle {
    sourceSets     = [sourceSets.main]
    ignoreFailures = true
    showViolations = false
}

/** Generate the checkstyle html report */
task checkstyleHtmlReport(dependsOn: checkstyleMain) {
   if (file("$reporting.baseDir/checkstyle/main.xml").exists()) {

       ant.xslt(
            in:    "$reporting.baseDir/checkstyle/main.xml",
            style: "$projectDir/config/checkstyle/checkstyle-noframes-severity-sorted.xsl",
            out:   "$reporting.baseDir/checkstyle/main.html"
       )

   }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }

    // workaround for source code highlighting in coverage report
    // see http://www.eclemma.org/jacoco/trunk/doc/faq.html
    //     http://forums.gradle.org/gradle/topics/_1_6_rc_1_jacoco_plugin_does_not_show_line_numbers
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

asciidoctor {
    sourceDir  = file("docs/asciidoc")
    backends   = [ "html5", "pdf" ]
    attributes = [
                  'pagenums': '' // generate page numbers for PDF backend - see asciidoctor-pdf#41
                 ]
    separateOutputDirs = true
}

bintray {
    user    = project.hasProperty('bintray_user')    ? bintray_user                : null
    key     = project.hasProperty('bintray_key')     ? bintray_key                 : null
    dryRun  = project.hasProperty('bintray_dryRun')  ? bintray_dryRun.toBoolean()  : true
    publish = project.hasProperty('bintray_publish') ? bintray_publish.toBoolean() : false

    configurations = [ 'archives' ]

    pkg {
        repo      = project.bintray_repo
        userOrg   = project.hasProperty('bintray_org') ? bintray_org : null
        name      = project.bintray_pkg
        desc      = project.description
        vcsUrl    = project.bintray_vcsUrl
        licenses  = [ 'GPL-2.0' ]

        version.mavenCentralSync.sync = false
    }
}

/*********************************************/
/**** Custom tasks/project configuration ****/

/** Create a distribution bundle with runtime dependencies included */
task distributionZip(type: Zip) { zipTask ->

    dependsOn asciidoctor

    classifier = 'dist-with-dependencies'

    into ("lib") {
        from configurations.runtime
    }
    into ("docs") {
        from "$buildDir/asciidoc"
    }
    from configurations.runtime.allArtifacts.files
    from fileTree("$projectDir").include(["*.md", "LICENSE.txt"])
}

artifacts {
    //archives distributionZip
}


/**************************************/
/**** Build plugins configuration ****/

buildscript {
    ext.pluginsVersions = [
        asciidoctor      : '1.5.2',
        asciidoctorjPdf  : '1.5.0-alpha.6',
        bintray          : '1.4',
        info             : '2.2.0'
    ]

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:' + pluginsVersions.asciidoctor
        classpath 'org.asciidoctor:asciidoctorj-pdf:' + pluginsVersions.asciidoctorjPdf
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:' + pluginsVersions.bintray
        classpath 'com.netflix.nebula:gradle-info-plugin:' + pluginsVersions.info
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
